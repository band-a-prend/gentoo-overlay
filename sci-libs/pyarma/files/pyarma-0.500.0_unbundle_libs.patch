diff -Naur a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2021-02-09 17:06:54.000000000 +0300
+++ b/CMakeLists.txt	2021-03-28 13:08:29.000000000 +0300
@@ -18,8 +18,8 @@
 if($ENV{CIBUILDWHEEL})
     set(ALLOW_OPENBLAS_MACOS ON CACHE BOOL "Allow detection of OpenBLAS on macOS" FORCE)
 endif()
-add_subdirectory(ext/armadillo)
-add_subdirectory(ext/pybind11)
+find_package(Armadillo REQUIRED)
+find_package(pybind11 REQUIRED)
 
 # # Add OpenBLAS for compilation if needed
 # if(PYARMA_STATIC_OPENBLAS)
@@ -43,9 +43,9 @@
 # Add -fPIC for Armadillo (and OpenBLAS if compiled)
 if(NOT MSVC)
     # clang on Windows does not support -fPIC
-    if(NOT WIN32)
-        target_compile_options(armadillo PRIVATE -fPIC)
-    endif()
+#    if(NOT WIN32)
+#        target_compile_options(armadillo PRIVATE -fPIC)
+#    endif()
 #   if(PYARMA_STATIC_OPENBLAS)
 #     target_compile_options(openblas PRIVATE -fPIC)
 #   endif()
@@ -60,7 +60,7 @@
         target_compile_definitions(pyarma PRIVATE -DPYARMA_PRECOMPILED_HDF5)
     endif()
     # Force use of LAPACK, as OpenBLAS is always used anyway
-    target_compile_definitions(armadillo PRIVATE -DARMA_USE_LAPACK)
+#    target_compile_definitions(armadillo PRIVATE -DARMA_USE_LAPACK)
     target_compile_definitions(pyarma PRIVATE -DARMA_USE_LAPACK)
     # # On Windows, use static OpenBLAS
     # if(WIN32)
@@ -76,17 +76,17 @@
 # Use precompiled OpenBLAS
 if(WIN32)
     message(STATUS "Linking precompiled OpenBLAS")
-    target_compile_definitions(armadillo PRIVATE -DARMA_USE_LAPACK)
-    target_compile_definitions(armadillo PRIVATE -DARMA_USE_BLAS)
+#    target_compile_definitions(armadillo PRIVATE -DARMA_USE_LAPACK)
+#    target_compile_definitions(armadillo PRIVATE -DARMA_USE_BLAS)
     target_compile_definitions(pyarma PRIVATE -DARMA_USE_LAPACK)
     target_compile_definitions(pyarma PRIVATE -DARMA_USE_BLAS)
-    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/ext/armadillo/examples/lib_win64/libopenblas.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
-    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/ext/armadillo/examples/lib_win64/libopenblas.dll DESTINATION .)
+#    file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/ext/armadillo/examples/lib_win64/libopenblas.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
+#    install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/ext/armadillo/examples/lib_win64/libopenblas.dll DESTINATION .)
     add_library(win64_openblas SHARED IMPORTED)
     set_target_properties(win64_openblas PROPERTIES
-        IMPORTED_LOCATION "${CMAKE_CURRENT_BINARY_DIR}"
-        IMPORTED_IMPLIB "${CMAKE_CURRENT_SOURCE_DIR}/ext/armadillo/examples/lib_win64/libopenblas.lib")
-    target_include_directories(armadillo PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/ext/armadillo/examples/lib_win64/")
+        IMPORTED_LOCATION "${CMAKE_CURRENT_BINARY_DIR}")
+#        IMPORTED_IMPLIB "${CMAKE_CURRENT_SOURCE_DIR}/ext/armadillo/examples/lib_win64/libopenblas.lib")
+#    target_include_directories(armadillo PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/ext/armadillo/examples/lib_win64/")
     target_link_libraries(armadillo PRIVATE win64_openblas)
     
     # Set a flag stating that a precompiled version of OpenBLAS is used
@@ -135,8 +135,6 @@
 # Include all directories used
 target_include_directories(pyarma PRIVATE 
 "${PROJECT_BINARY_DIR}"
-"${PROJECT_SOURCE_DIR}/ext/armadillo"
-"${PROJECT_SOURCE_DIR}/ext/pybind11"
 "${PROJECT_SOURCE_DIR}/include"
 )
 
diff -Naur a/src/pyarma.cpp b/src/pyarma.cpp
--- a/src/pyarma.cpp	2021-02-09 17:06:55.000000000 +0300
+++ b/src/pyarma.cpp	2021-03-28 12:52:36.000000000 +0300
@@ -58,14 +58,7 @@
 const unsigned int pyarma_version::patch;
 
 PYBIND11_MODULE(pyarma, m) {
-    // Ensure only embedded versions are used
-    #ifndef ARMA_TRIPWIRE
-    static_assert(false, "The embedded version of Armadillo could not be used.");
-    #endif
-    #ifndef PYBIND11_TRIPWIRE
-    static_assert(false, "The embedded version of pybind11 could not be used.");
-    #endif
-    
+
     m.doc() = (string("Python library for linear algebra and scientific computing") + string("\n\nPyArmadillo version: ") + pyarma_version::as_string() \
     + string("\n\nArmadillo version: ") + arma::arma_version::as_string() + string("\n\npybind11 version: ") \
     + to_string(PYBIND11_VERSION_MAJOR) + "." + to_string(PYBIND11_VERSION_MINOR) + "." + to_string(PYBIND11_VERSION_PATCH)) \
