Index: src/plugins/codecompletion/classbrowser.cpp
===================================================================
--- a/src/plugins/codecompletion/classbrowser.cpp	(revision 12313)
+++ b/src/plugins/codecompletion/classbrowser.cpp	(revision 12314)
@@ -102,9 +102,6 @@
     EVT_TREE_ITEM_ACTIVATED  (XRCID("treeAll"),          ClassBrowser::OnTreeItemDoubleClick)
     EVT_TREE_ITEM_RIGHT_CLICK(XRCID("treeAll"),          ClassBrowser::OnTreeItemRightClick)
     EVT_TREE_ITEM_EXPANDING  (XRCID("treeAll"),          ClassBrowser::OnTreeItemExpanding)
-#ifndef CC_NO_COLLAPSE_ITEM
-    EVT_TREE_ITEM_COLLAPSING (XRCID("treeAll"),          ClassBrowser::OnTreeItemCollapsing)
-#endif // CC_NO_COLLAPSE_ITEM
     EVT_TREE_SEL_CHANGED     (XRCID("treeAll"),          ClassBrowser::OnTreeSelChanged)
 
     EVT_TEXT_ENTER(XRCID("cmbSearch"),                   ClassBrowser::OnSearch)
@@ -958,27 +955,8 @@
             m_ClassBrowserSemaphore.Post();
         }
     }
-
-#ifndef CC_NO_COLLAPSE_ITEM
-    event.Allow();
-#endif // CC_NO_COLLAPSE_ITEM
 }
 
-#ifndef CC_NO_COLLAPSE_ITEM
-void ClassBrowser::OnTreeItemCollapsing(wxTreeEvent& event)
-{
-    if (m_ClassBrowserBuilderThread && !m_ClassBrowserBuilderThread->IsBusy())
-    {
-        m_targetNode = event.GetItem();
-        m_targetTreeCtrl = m_CCTreeCtrl;
-        m_ClassBrowserBuilderThread->SetNextJob(JobCollapseItem, GetItemPtr(m_targetNode));
-        m_ClassBrowserSemaphore.Post();
-    }
-
-    event.Allow();
-}
-#endif // CC_NO_COLLAPSE_ITEM
-
 void ClassBrowser::OnTreeSelChanged(wxTreeEvent& event)
 {
     if (m_ClassBrowserBuilderThread && m_Parser && m_Parser->ClassBrowserOptions().treeMembers)
@@ -986,10 +964,6 @@
         m_ClassBrowserBuilderThread->SetNextJob(JobSelectTree, GetItemPtr(event.GetItem()));
         m_ClassBrowserSemaphore.Post();
     }
-
-#ifndef CC_NO_COLLAPSE_ITEM
-    event.Allow();
-#endif // CC_NO_COLLAPSE_ITEM
 }
 
 void ClassBrowser::SetNodeProperties(CCTreeItem* Item)
@@ -1184,44 +1158,3 @@
             m_CCTreeCtrlBottom->DeleteAllItems();
     }
 }
-
-#ifndef CC_NO_COLLAPSE_ITEM
-void ClassBrowser::CollapseItem(CCTreeItem* item)
-{
-    std::stack <wxString> path;
-
-    // Follow the non-GUI tree upwards until root is found, take note of the path
-    while (item->m_parent)
-    {
-        path.push(item->m_text);
-        item = item->m_parent;
-    }
-
-    // Walk thru the GUI tree starting on root and following the previous path backwards
-    wxTreeItemId id = m_CCTreeCtrl->GetRootItem();
-    while (!path.empty())
-    {
-        wxTreeItemIdValue cookie;
-        for (id = m_CCTreeCtrl->GetFirstChild(id, cookie); id.IsOk(); id = m_CCTreeCtrl->GetNextChild(id, cookie))
-        {
-            if (m_CCTreeCtrl->GetItemText(id) == path.top())
-            {
-                break;
-            }
-        }
-
-        path.pop();
-        // If the path can not be found stop walking
-        if (!id.IsOk())
-        {
-            break;
-        }
-    }
-
-    if (id.IsOk())
-    {
-        m_CCTreeCtrl->DeleteChildren(id);
-        m_CCTreeCtrl->SetItemHasChildren(id);
-    }
-}
-#endif // CC_NO_COLLAPSE_ITEM
Index: src/plugins/codecompletion/classbrowser.h
===================================================================
--- a/src/plugins/codecompletion/classbrowser.h	(revision 12313)
+++ b/src/plugins/codecompletion/classbrowser.h	(revision 12314)
@@ -108,10 +108,6 @@
     void SelectSavedItem();
     void ReselectItem();
 
-#ifndef CC_NO_COLLAPSE_ITEM
-    void CollapseItem(CCTreeItem* item);
-#endif // CC_NO_COLLAPSE_ITEM
-
 private:
     /** handler for the mouse double click on a tree item, we usually make a jump to the
      *  associated token's position.
@@ -200,11 +196,6 @@
      */
     void OnTreeItemExpanding(wxTreeEvent& event);
 
-#ifndef CC_NO_COLLAPSE_ITEM
-    /** collapse one node of the top tree */
-    void OnTreeItemCollapsing(wxTreeEvent& event);
-#endif // CC_NO_COLLAPSE_ITEM
-
     /** item selection changed in the top tree */
     void OnTreeSelChanged(wxTreeEvent& event);
 
Index: src/plugins/codecompletion/classbrowserbuilderthread.h
===================================================================
--- a/src/plugins/codecompletion/classbrowserbuilderthread.h	(revision 12313)
+++ b/src/plugins/codecompletion/classbrowserbuilderthread.h	(revision 12314)
@@ -57,8 +57,7 @@
 {
     JobBuildTree,
     JobSelectTree,
-    JobExpandItem,
-    JobCollapseItem
+    JobExpandItem
 };
 
 class CCTree;
@@ -212,9 +211,6 @@
 
     /** Construct the children of the tree item */
     void ExpandItem(CCTreeItem* item);
-#ifndef CC_NO_COLLAPSE_ITEM
-    void CollapseItem(CCTreeItem* item);
-#endif // CC_NO_COLLAPSE_ITEM
 
     /** Copy the internal (top or bottom) tree to the GUI tree
      * @param top \a true to copy the top tree
Index: src/CodeBlocks_wx30-unix.cbp
===================================================================
--- a/src/CodeBlocks_wx30-unix.cbp	(revision 12313)
+++ b/src/CodeBlocks_wx30-unix.cbp	(revision 12314)
@@ -288,7 +288,6 @@
 				<Option run_host_application_in_terminal="0" />
 				<Option projectLinkerOptionsRelation="1" />
 				<Compiler>
-					<Add option="-DCC_NO_COLLAPSE_ITEM" />
 					<Add directory="include" />
 				</Compiler>
 				<Linker>
Index: src/CodeBlocks_wx31.cbp
===================================================================
--- a/src/CodeBlocks_wx31.cbp	(revision 12313)
+++ b/src/CodeBlocks_wx31.cbp	(revision 12314)
@@ -397,7 +397,6 @@
 				<Option projectLinkerOptionsRelation="1" />
 				<Compiler>
 					<Add option="-DBUILDING_PLUGIN" />
-					<Add option="-DCC_NO_COLLAPSE_ITEM" />
 					<Add directory="include" />
 				</Compiler>
 				<Linker>
Index: src/CodeBlocks_wx31_64.cbp
===================================================================
--- a/src/CodeBlocks_wx31_64.cbp	(revision 12313)
+++ b/src/CodeBlocks_wx31_64.cbp	(revision 12314)
@@ -397,7 +397,6 @@
 				<Option projectLinkerOptionsRelation="1" />
 				<Compiler>
 					<Add option="-DBUILDING_PLUGIN" />
-					<Add option="-DCC_NO_COLLAPSE_ITEM" />
 					<Add directory="include" />
 				</Compiler>
 				<Linker>
Index: src/plugins/codecompletion/classbrowserbuilderthread.cpp
===================================================================
--- a/src/plugins/codecompletion/classbrowserbuilderthread.cpp	(revision 12313)
+++ b/src/plugins/codecompletion/classbrowserbuilderthread.cpp	(revision 12314)
@@ -224,11 +224,6 @@
           case JobExpandItem: // add child items on the fly
               ExpandGUIItem();
               break;
-#ifndef CC_NO_COLLAPSE_ITEM
-          case JobCollapseItem: // collapse current item
-              CollapseItem(m_targetItem);
-              break;
-#endif
           default:
               ;
           }
@@ -357,30 +352,6 @@
         CC_LOCKER_TRACK_CBBT_MTX_UNLOCK(m_ClassBrowserBuilderThreadMutex)
 }
 
-#ifndef CC_NO_COLLAPSE_ITEM
-void ClassBrowserBuilderThread::CollapseItem(CCTreeItem* item)
-{
-    TRACE("ClassBrowserBuilderThread::CollapseItem");
-
-    if (CBBT_SANITY_CHECK || !item)
-        return;
-
-    bool locked = false;
-    if (m_InitDone)
-    {
-        CC_LOCKER_TRACK_CBBT_MTX_LOCK(m_ClassBrowserBuilderThreadMutex)
-        locked = true;
-    }
-
-    m_CCTreeTop->DeleteChildren(item);
-    m_CCTreeTop->SetItemHasChildren(item);
-    m_Parent->CallAfter(&ClassBrowser::CollapseItem, item);
-
-    if (locked)
-        CC_LOCKER_TRACK_CBBT_MTX_UNLOCK(m_ClassBrowserBuilderThreadMutex)
-}
-#endif // CC_NO_COLLAPSE_ITEM
-
 void ClassBrowserBuilderThread::SelectGUIItem()
 {
     TRACE("ClassBrowserBuilderThread::SelectItem");
@@ -466,22 +437,6 @@
     sw.Start();
 #endif
 
-#ifndef CC_NO_COLLAPSE_ITEM
-    // the tree is completely dynamic: it is populated when a node expands/collapses.
-    // so, by expanding the root node, we already instruct it to fill the top level :)
-    //
-    // this technique makes it really fast to draw (we only draw what's expanded) and
-    // has very minimum memory overhead since it contains as few items as possible.
-    // plus, it doesn't flicker because we're not emptying it and re-creating it each time ;)
-
-    // 5.) Collapse item. This removes all children
-    CollapseItem(root);
-#ifdef CC_BUILDTREE_MEASURING
-    CCLogger::Get()->DebugLog(F("Collapsing root item took : %ld ms", sw.Time()));
-    sw.Start();
-#endif
-#endif
-
     // 6.) Expand item
     ExpandItem(root);
 #ifdef CC_BUILDTREE_MEASURING
@@ -567,13 +522,6 @@
             CCTreeItem* next = tree->GetPrevSibling(existing);
             if (!next && (tree == m_CCTreeTop) && (tree->GetChildrenCount(parent, false) == 1))
             {
-#ifndef CC_NO_COLLAPSE_ITEM
-                CollapseItem(parent);
-                // existing is the last item an gets deleted in CollapseItem and at least on 64-bit linux it can
-                // lead to a crash, because we use it again some lines later, but m_Item is not 0 in some rare cases,
-                // and therefore IsOk returns true !!
-                // so we leave the function here
-#endif // CC_NO_COLLAPSE_ITEM
                 return;
             }
             else
