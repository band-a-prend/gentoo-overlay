Index: codeblocks-20.03/src/plugins/contrib/FortranProject/makefilegen.cpp
===================================================================
--- codeblocks-20.03/src/plugins/contrib/FortranProject/makefilegen.cpp	(revision 279)
+++ codeblocks-20.03/src/plugins/contrib/FortranProject/makefilegen.cpp	(revision 280)
@@ -9,6 +9,7 @@
     #include <compiler.h>
     #include <compilerfactory.h>
 #endif
+#include <map>
 
 #include "makefiledlg.h"
 #include "nativeparserf.h"
@@ -38,8 +39,16 @@
 
     mfile.Write(_T("#\n# This Makefile was generated by Code::Blocks IDE.\n#\n"));
 
-
+    // Add project files to a map. Purpose: get sorted list of files.
+    std::map<wxString,ProjectFile*> projFilesMap;
     FilesList& filesList = buildTarget->GetFilesList();
+    FilesList::iterator it;
+    for( it = filesList.begin(); it != filesList.end(); ++it )
+    {
+        ProjectFile* projFile = *it;
+        const pfDetails& pfd = projFile->GetFileDetails(buildTarget);
+        projFilesMap[pfd.source_file_absolute_native] = projFile;
+    }
 
     wxArrayString src_dirs;
     wxArrayString src_ext;
@@ -48,12 +57,9 @@
     wxString sfiles;
     wxString ofiles;
 
-
-
-    FilesList::iterator it;
-    for( it = filesList.begin(); it != filesList.end(); ++it )
+    for (auto const& p : projFilesMap)
     {
-        ProjectFile* projFile = *it;
+        ProjectFile* projFile = p.second;
         const pfDetails& pfd = projFile->GetFileDetails(buildTarget);
 
         wxFileName sfn(pfd.source_file_absolute_native);
@@ -107,9 +113,9 @@
 
     wxString objdir = _T("OBJS_DIR = ");
 
-    for( it = filesList.begin(); it != filesList.end(); ++it )
+    for (auto const& p : projFilesMap)
     {
-        ProjectFile* projFile = *it;
+        ProjectFile* projFile = p.second;
         const pfDetails& pfd = projFile->GetFileDetails(buildTarget);
 
         wxFileName sfn(pfd.source_file_absolute_native);
@@ -127,9 +133,9 @@
     bool containsNonFortranFiles = false;
 
     wxString depsFiles;
-    for( it = filesList.begin(); it != filesList.end(); ++it )
+    for (auto const& p : projFilesMap)
     {
-        ProjectFile* projFile = *it;
+        ProjectFile* projFile = p.second;
         const pfDetails& pfd = projFile->GetFileDetails(buildTarget);
 
         if (pNativeParser->IsFileFortran(pfd.source_file) && projFile->compile)
@@ -429,7 +435,7 @@
 	clean << _T("\trm -f $(EXE_DIR)$(EXE)\n");
     mfile.Write(clean);
 
-    mfile.Write(_T("\n# Dependencies of files\n"));
+    mfile.Write(_T("\n# File dependencies\n"));
     mfile.Write(depsFiles);
     mfile.Write(_T("\n"));
 
